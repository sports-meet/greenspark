import React, { useState, useRef } from "react";
import { base44 } from "@/api/base44Client";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Camera, Upload, Loader2, X, Sparkles, Image } from "lucide-react";

export default function GeneralSubmissionModal({ isOpen, onClose, onSuccess }) {
  const [formData, setFormData] = useState({
    full_name: "",
    phone_number: "",
    email: "",
    reason: ""
  });
  const [selectedFile, setSelectedFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const fileInputRef = useRef(null);
  const cameraInputRef = useRef(null);

  const handleFileSelect = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (file.size > 5 * 1024 * 1024) {
      alert("File too large. Please select an image under 5MB");
      return;
    }

    if (!file.type.startsWith('image/')) {
      alert("Invalid file type. Please select an image file");
      return;
    }

    setSelectedFile(file);
    setPreviewUrl(URL.createObjectURL(file));
  };

  const handleSubmit = async () => {
    if (!formData.full_name || !formData.phone_number || !formData.reason || !selectedFile) {
      alert("Please fill in all required fields and upload a photo");
      return;
    }

    setIsSubmitting(true);
    try {
      const { file_url } = await base44.integrations.Core.UploadFile({ file: selectedFile });

      await base44.entities.GeneralSubmission.create({
        full_name: formData.full_name,
        phone_number: formData.phone_number,
        email: formData.email || "",
        reason: formData.reason,
        photo_url: file_url,
        status: "pending",
        points_awarded: 0
      });

      alert("Submission received! ðŸŒŸ Thank you for contributing to a greener UAE. We'll review your action soon.");

      setFormData({ full_name: "", phone_number: "", email: "", reason: "" });
      setSelectedFile(null);
      setPreviewUrl(null);
      
      onSuccess();
      onClose();
    } catch (error) {
      alert(error.message || "Submission failed. Please try again");
    }
    setIsSubmitting(false);
  };

  const handleClose = () => {
    setFormData({ full_name: "", phone_number: "", email: "", reason: "" });
    setSelectedFile(null);
    setPreviewUrl(null);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-lg max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="p-2.5 rounded-xl bg-gradient-to-br from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] shadow-lg">
              <Sparkles className="w-5 h-5 text-white" />
            </div>
            <div>
              <DialogTitle className="text-lg font-bold">Share Your Action</DialogTitle>
              <p className="text-sm text-gray-500">No account needed!</p>
            </div>
          </div>
        </DialogHeader>

        <div className="space-y-4 py-2">
          <div>
            <Label htmlFor="full_name" className="text-sm font-semibold">Full Name *</Label>
            <Input
              id="full_name"
              value={formData.full_name}
              onChange={(e) => setFormData({...formData, full_name: e.target.value})}
              placeholder="Your name"
              className="mt-1 h-11 text-base"
            />
          </div>

          <div>
            <Label htmlFor="phone_number" className="text-sm font-semibold">Phone Number *</Label>
            <Input
              id="phone_number"
              value={formData.phone_number}
              onChange={(e) => setFormData({...formData, phone_number: e.target.value})}
              placeholder="+971 XX XXX XXXX"
              className="mt-1 h-11 text-base"
            />
          </div>

          <div>
            <Label htmlFor="email" className="text-sm font-semibold">Email (Optional)</Label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({...formData, email: e.target.value})}
              placeholder="you@example.com"
              className="mt-1 h-11 text-base"
            />
          </div>

          <div>
            <Label htmlFor="reason" className="text-sm font-semibold">What did you do? *</Label>
            <Textarea
              id="reason"
              value={formData.reason}
              onChange={(e) => setFormData({...formData, reason: e.target.value})}
              placeholder="Describe your eco-friendly action..."
              maxLength={500}
              rows={3}
              className="resize-none mt-1 text-base"
            />
          </div>

          <div>
            <Label className="text-sm font-semibold mb-2 block">Proof Photo *</Label>
            
            {previewUrl ? (
              <div className="relative rounded-xl overflow-hidden border-2 border-[hsl(150,80%,40%)]">
                <img 
                  src={previewUrl} 
                  alt="Preview" 
                  className="w-full h-48 object-cover"
                />
                <Button
                  variant="destructive"
                  size="icon"
                  className="absolute top-2 right-2 rounded-full shadow-lg"
                  onClick={() => {
                    setSelectedFile(null);
                    setPreviewUrl(null);
                  }}
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            ) : (
              <div className="grid gap-3">
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleFileSelect}
                  className="hidden"
                />
                
                <input
                  ref={cameraInputRef}
                  type="file"
                  accept="image/*"
                  capture="environment"
                  onChange={handleFileSelect}
                  className="hidden"
                />
                
                <Button
                  type="button"
                  variant="outline"
                  className="h-24 border-2 border-dashed hover:border-[hsl(150,80%,40%)] active:scale-95 transition-all"
                  onClick={() => cameraInputRef.current?.click()}
                >
                  <div className="flex flex-col items-center gap-1">
                    <Camera className="w-7 h-7 text-[hsl(150,80%,40%)]" />
                    <span className="text-sm font-medium">Take Photo</span>
                  </div>
                </Button>

                <Button
                  type="button"
                  variant="outline"
                  className="h-16 hover:border-[hsl(150,80%,40%)] active:scale-95 transition-all"
                  onClick={() => fileInputRef.current?.click()}
                >
                  <Image className="w-5 h-5 mr-2 text-gray-600" />
                  <span className="text-sm">Choose from Gallery</span>
                </Button>
              </div>
            )}
          </div>
        </div>

        <DialogFooter className="gap-2">
          <Button variant="outline" onClick={handleClose} disabled={isSubmitting} className="flex-1">
            Cancel
          </Button>
          <Button
            onClick={handleSubmit}
            disabled={isSubmitting}
            className="flex-1 bg-gradient-to-r from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] text-white hover:opacity-90"
          >
            {isSubmitting ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Sending...
              </>
            ) : (
              "Submit"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
