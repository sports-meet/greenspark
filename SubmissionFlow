import React, { useState, useRef } from "react";
import { base44 } from "@/api/base44Client";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Camera, Loader2, MapPin, CheckCircle, Image as ImageIcon, ArrowRight, Zap } from "lucide-react";
import { Progress } from "@/components/ui/progress";

export default function SubmissionFlow({ activity, isOpen, onClose, onSuccess, user }) {
  const [step, setStep] = useState(1); // 1: before, 2: after, 3: details, 4: processing
  const [beforeImage, setBeforeImage] = useState(null);
  const [beforePreview, setBeforePreview] = useState(null);
  const [afterImage, setAfterImage] = useState(null);
  const [afterPreview, setAfterPreview] = useState(null);
  const [location, setLocation] = useState(null);
  const [description, setDescription] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [aiAnalysis, setAiAnalysis] = useState(null);
  
  const beforeInputRef = useRef(null);
  const beforeCameraRef = useRef(null);
  const afterInputRef = useRef(null);
  const afterCameraRef = useRef(null);

  const getLocation = () => {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error("Geolocation not supported"));
        return;
      }
      
      navigator.geolocation.getCurrentPosition(
        (position) => {
          resolve({
            lat: position.coords.latitude,
            lng: position.coords.longitude
          });
        },
        (error) => reject(error),
        { enableHighAccuracy: true, timeout: 10000 }
      );
    });
  };

  const handleBeforePhoto = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      alert("Please select a valid image file");
      return;
    }

    try {
      const loc = await getLocation();
      setLocation(loc);
      setBeforeImage(file);
      setBeforePreview(URL.createObjectURL(file));
      setStep(2);
    } catch (error) {
      alert("Location access required for verification. Please enable location services.");
    }
  };

  const handleAfterPhoto = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      alert("Please select a valid image file");
      return;
    }

    setAfterImage(file);
    setAfterPreview(URL.createObjectURL(file));
    setStep(3);
  };

  const analyzeWithAI = async (beforeUrl, afterUrl) => {
    const analysisPrompt = `Analyze these before and after cleanup photos.

BEFORE IMAGE: The first image shows waste/litter that needs to be removed.
AFTER IMAGE: The second image shows the same location after cleanup.

Please provide:
1. Estimated total weight of waste removed in kilograms (be realistic, consider visible volume)
2. Types of waste identified (e.g., plastic bottles, paper, metal cans, organic waste)
3. Confirmation that both photos appear to be from the same location
4. Environmental impact score (1-10, where 10 is highest impact)

Return JSON format only.`;

    const result = await base44.integrations.Core.InvokeLLM({
      prompt: analysisPrompt,
      file_urls: [beforeUrl, afterUrl],
      response_json_schema: {
        type: "object",
        properties: {
          estimated_weight_kg: { type: "number" },
          waste_types: { type: "array", items: { type: "string" } },
          same_location: { type: "boolean" },
          impact_score: { type: "number" },
          analysis_notes: { type: "string" }
        }
      }
    });

    return result;
  };

  const handleSubmit = async () => {
    if (!beforeImage || !afterImage || !location) {
      alert("Missing required data");
      return;
    }

    setIsProcessing(true);
    setStep(4);

    try {
      // Upload images
      const { file_url: beforeUrl } = await base44.integrations.Core.UploadFile({ file: beforeImage });
      const { file_url: afterUrl } = await base44.integrations.Core.UploadFile({ file: afterImage });

      // AI Analysis
      const analysis = await analyzeWithAI(beforeUrl, afterUrl);
      setAiAnalysis(analysis);

      if (!analysis.same_location) {
        alert("⚠️ Photos don't appear to be from the same location. Please retake.");
        setStep(1);
        setIsProcessing(false);
        return;
      }

      // Calculate points
      const basePoints = activity.points || 10;
      const weightBonus = Math.floor(analysis.estimated_weight_kg * 2); // 2 points per kg
      const priorityBonus = activity.is_priority_zone ? 20 : 0;
      const totalPoints = basePoints + weightBonus + priorityBonus;

      // Create submission
      await base44.entities.UserActivity.create({
        user_id: user.id,
        activity_id: activity.id,
        before_image_url: beforeUrl,
        after_image_url: afterUrl,
        location_lat: location.lat,
        location_lng: location.lng,
        location_name: description || "Cleanup location",
        description,
        estimated_weight_kg: analysis.estimated_weight_kg,
        waste_types: analysis.waste_types,
        ai_analysis: analysis,
        status: "pending",
        points_awarded: totalPoints,
        bonus_points: weightBonus + priorityBonus
      });

      alert(`🎉 Cleanup submitted!\n\n📊 AI Analysis:\n• ${analysis.estimated_weight_kg}kg waste removed\n• ${analysis.waste_types.join(', ')}\n\n⭐ Points pending: ${totalPoints}\n(${basePoints} base + ${weightBonus} weight bonus ${priorityBonus > 0 ? `+ ${priorityBonus} priority zone` : ''})`);

      onSuccess();
    } catch (error) {
      alert(error.message || "Submission failed");
      setStep(1);
    }
    
    setIsProcessing(false);
  };

  const handleClose = () => {
    setStep(1);
    setBeforeImage(null);
    setBeforePreview(null);
    setAfterImage(null);
    setAfterPreview(null);
    setLocation(null);
    setDescription("");
    setAiAnalysis(null);
    onClose();
  };

  if (!activity) return null;

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-lg max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Zap className="w-5 h-5 text-[hsl(150,80%,40%)]" />
            {activity.title}
          </DialogTitle>
          <Progress value={(step / 4) * 100} className="h-2 mt-2" />
        </DialogHeader>

        <div className="py-4">
          {/* Step 1: Before Photo */}
          {step === 1 && (
            <div className="space-y-4">
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p className="text-sm text-blue-900 font-medium mb-1">📸 Step 1: Before Photo</p>
                <p className="text-xs text-blue-700">
                  Take a photo of the waste/litter BEFORE cleaning. Location will be captured automatically.
                </p>
              </div>

              {beforePreview ? (
                <div className="relative rounded-xl overflow-hidden">
                  <img src={beforePreview} alt="Before" className="w-full h-64 object-cover" />
                  <div className="absolute bottom-3 left-3 bg-black/70 backdrop-blur text-white px-3 py-1 rounded-full text-xs flex items-center gap-1">
                    <MapPin className="w-3 h-3" />
                    Location captured
                  </div>
                </div>
              ) : (
                <div className="grid gap-3">
                  <input
                    ref={beforeCameraRef}
                    type="file"
                    accept="image/*"
                    capture="environment"
                    onChange={handleBeforePhoto}
                    className="hidden"
                  />
                  
                  <input
                    ref={beforeInputRef}
                    type="file"
                    accept="image/*"
                    onChange={handleBeforePhoto}
                    className="hidden"
                  />
                  
                  <Button
                    onClick={() => beforeCameraRef.current?.click()}
                    className="h-32 bg-gradient-to-br from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] text-white hover:opacity-90"
                  >
                    <div className="flex flex-col items-center gap-2">
                      <Camera className="w-10 h-10" />
                      <span className="font-semibold">Take Before Photo</span>
                    </div>
                  </Button>

                  <Button
                    onClick={() => beforeInputRef.current?.click()}
                    variant="outline"
                    className="h-16"
                  >
                    <ImageIcon className="w-5 h-5 mr-2" />
                    Choose from Gallery
                  </Button>
                </div>
              )}
            </div>
          )}

          {/* Step 2: After Photo */}
          {step === 2 && (
            <div className="space-y-4">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <p className="text-sm text-green-900 font-medium mb-1">✅ Step 2: After Photo</p>
                <p className="text-xs text-green-700">
                  Clean up the area, then take an "after" photo from the same angle.
                </p>
              </div>

              <div className="grid grid-cols-2 gap-2 mb-4">
                <div>
                  <p className="text-xs text-gray-600 mb-1">Before</p>
                  <img src={beforePreview} alt="Before" className="w-full h-24 object-cover rounded-lg" />
                </div>
                <div>
                  <p className="text-xs text-gray-600 mb-1">After</p>
                  {afterPreview ? (
                    <img src={afterPreview} alt="After" className="w-full h-24 object-cover rounded-lg" />
                  ) : (
                    <div className="w-full h-24 bg-gray-100 rounded-lg flex items-center justify-center">
                      <Camera className="w-6 h-6 text-gray-400" />
                    </div>
                  )}
                </div>
              </div>

              {!afterPreview && (
                <div className="grid gap-3">
                  <input
                    ref={afterCameraRef}
                    type="file"
                    accept="image/*"
                    capture="environment"
                    onChange={handleAfterPhoto}
                    className="hidden"
                  />
                  
                  <input
                    ref={afterInputRef}
                    type="file"
                    accept="image/*"
                    onChange={handleAfterPhoto}
                    className="hidden"
                  />
                  
                  <Button
                    onClick={() => afterCameraRef.current?.click()}
                    className="h-24 bg-gradient-to-br from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] text-white"
                  >
                    <div className="flex flex-col items-center gap-2">
                      <Camera className="w-8 h-8" />
                      <span className="font-semibold">Take After Photo</span>
                    </div>
                  </Button>

                  <Button
                    onClick={() => afterInputRef.current?.click()}
                    variant="outline"
                  >
                    <ImageIcon className="w-5 h-5 mr-2" />
                    Choose from Gallery
                  </Button>
                </div>
              )}

              {afterPreview && (
                <Button
                  onClick={() => setStep(3)}
                  className="w-full bg-gradient-to-r from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] text-white"
                >
                  Continue
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              )}
            </div>
          )}

          {/* Step 3: Details */}
          {step === 3 && (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-2 mb-4">
                <div>
                  <p className="text-xs text-gray-600 mb-1">Before</p>
                  <img src={beforePreview} alt="Before" className="w-full h-24 object-cover rounded-lg" />
                </div>
                <div>
                  <p className="text-xs text-gray-600 mb-1">After</p>
                  <img src={afterPreview} alt="After" className="w-full h-24 object-cover rounded-lg" />
                </div>
              </div>

              <div>
                <Label htmlFor="description" className="text-sm font-semibold">
                  Location / Description (Optional)
                </Label>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="e.g., Park near Dubai Mall, Beach cleanup..."
                  rows={3}
                  className="mt-1"
                />
              </div>

              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                <p className="text-xs text-yellow-800">
                  🤖 AI will analyze your photos to estimate waste weight and verify the cleanup
                </p>
              </div>

              <Button
                onClick={handleSubmit}
                disabled={isProcessing}
                className="w-full bg-gradient-to-r from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] text-white h-12"
              >
                {isProcessing ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  <>
                    <CheckCircle className="w-4 h-4 mr-2" />
                    Submit Cleanup
                  </>
                )}
              </Button>
            </div>
          )}

          {/* Step 4: Processing */}
          {step === 4 && (
            <div className="text-center py-8">
              <Loader2 className="w-16 h-16 animate-spin text-[hsl(150,80%,40%)] mx-auto mb-4" />
              <h3 className="text-lg font-bold text-gray-900 mb-2">Analyzing Your Cleanup</h3>
              <p className="text-sm text-gray-600 mb-4">
                AI is estimating waste weight and verifying photos...
              </p>
              <Progress value={75} className="max-w-xs mx-auto" />
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
