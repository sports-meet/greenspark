import React, { useState, useRef, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MapPin, Camera, ArrowLeft, ThumbsUp, Loader2, Image as ImageIcon, AlertTriangle } from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function SpotIt() {
  const [user, setUser] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    location_name: "",
    description: ""
  });
  const [selectedFile, setSelectedFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [location, setLocation] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const fileInputRef = useRef(null);
  const cameraInputRef = useRef(null);
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  useEffect(() => {
    checkUser();
  }, []);

  const checkUser = async () => {
    try {
      const currentUser = await base44.auth.me();
      setUser(currentUser);
    } catch (error) {
      alert("Please sign in to spot litter");
      navigate(createPageUrl("Home"));
    }
  };

  const { data: hotspots = [] } = useQuery({
    queryKey: ['hotspots'],
    queryFn: () => base44.entities.LitterHotspot.filter({ status: 'active' }, '-upvotes'),
    initialData: []
  });

  const upvoteMutation = useMutation({
    mutationFn: async (hotspotId) => {
      const hotspot = hotspots.find(h => h.id === hotspotId);
      await base44.entities.LitterHotspot.update(hotspotId, {
        upvotes: (hotspot.upvotes || 0) + 1
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['hotspots'] });
    }
  });

  const getLocation = () => {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error("Geolocation not supported"));
        return;
      }
      
      navigator.geolocation.getCurrentPosition(
        (position) => {
          resolve({
            lat: position.coords.latitude,
            lng: position.coords.longitude
          });
        },
        (error) => reject(error),
        { enableHighAccuracy: true, timeout: 10000 }
      );
    });
  };

  const handleFileSelect = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      alert("Please select a valid image file");
      return;
    }

    try {
      const loc = await getLocation();
      setLocation(loc);
      setSelectedFile(file);
      setPreviewUrl(URL.createObjectURL(file));
    } catch (error) {
      alert("Location access required. Please enable location services.");
    }
  };

  const handleSubmit = async () => {
    if (!selectedFile || !location || !formData.description) {
      alert("Please fill in all required fields");
      return;
    }

    setIsSubmitting(true);
    try {
      const { file_url } = await base44.integrations.Core.UploadFile({ file: selectedFile });

      await base44.entities.LitterHotspot.create({
        reporter_id: user.id,
        location_lat: location.lat,
        location_lng: location.lng,
        location_name: formData.location_name || "Unnamed Location",
        photo_url: file_url,
        description: formData.description,
        estimated_severity: "Medium",
        status: "active",
        upvotes: 0
      });

      alert("ðŸŽ¯ Hotspot reported! Thank you for keeping our community clean.");

      setFormData({ location_name: "", description: "" });
      setSelectedFile(null);
      setPreviewUrl(null);
      setLocation(null);
      setShowForm(false);
      
      queryClient.invalidateQueries({ queryKey: ['hotspots'] });
    } catch (error) {
      alert(error.message || "Failed to report hotspot");
    }
    setIsSubmitting(false);
  };

  const getSeverityColor = (severity) => {
    const colors = {
      Low: "bg-blue-100 text-blue-800",
      Medium: "bg-yellow-100 text-yellow-800",
      High: "bg-orange-100 text-orange-800",
      Critical: "bg-red-100 text-red-800"
    };
    return colors[severity] || colors.Medium;
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-[hsl(150,30%,98%)] to-white pb-20">
      {/* Header */}
      <div className="sticky top-0 z-10 bg-white border-b border-gray-200 px-4 py-3">
        <div className="flex items-center gap-3">
          <Link to={createPageUrl("Home")}>
            <Button variant="ghost" size="icon">
              <ArrowLeft className="w-5 h-5" />
            </Button>
          </Link>
          <div>
            <h1 className="text-xl font-bold text-gray-900">Spot Litter</h1>
            <p className="text-xs text-gray-600">Report waste hotspots</p>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-6">
        {/* Report Button */}
        {!showForm && (
          <Button
            onClick={() => setShowForm(true)}
            className="w-full mb-6 h-16 bg-gradient-to-r from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] text-white text-lg font-semibold"
          >
            <MapPin className="w-6 h-6 mr-2" />
            Report New Hotspot
          </Button>
        )}

        {/* Reporting Form */}
        {showForm && (
          <Card className="p-6 mb-6 border-2 border-[hsl(150,80%,40%)]">
            <h2 className="text-lg font-bold text-gray-900 mb-4">Report Litter Hotspot</h2>
            
            <div className="space-y-4">
              <div>
                <Label className="text-sm font-semibold">Photo *</Label>
                {previewUrl ? (
                  <div className="relative rounded-xl overflow-hidden mt-2">
                    <img src={previewUrl} alt="Preview" className="w-full h-48 object-cover" />
                    <div className="absolute bottom-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center gap-1">
                      <MapPin className="w-3 h-3" />
                      Location captured
                    </div>
                  </div>
                ) : (
                  <div className="grid gap-2 mt-2">
                    <input
                      ref={cameraInputRef}
                      type="file"
                      accept="image/*"
                      capture="environment"
                      onChange={handleFileSelect}
                      className="hidden"
                    />
                    
                    <input
                      ref={fileInputRef}
                      type="file"
                      accept="image/*"
                      onChange={handleFileSelect}
                      className="hidden"
                    />
                    
                    <Button
                      onClick={() => cameraInputRef.current?.click()}
                      variant="outline"
                      className="h-20"
                    >
                      <Camera className="w-6 h-6 mr-2" />
                      Take Photo
                    </Button>

                    <Button
                      onClick={() => fileInputRef.current?.click()}
                      variant="outline"
                    >
                      <ImageIcon className="w-5 h-5 mr-2" />
                      Choose from Gallery
                    </Button>
                  </div>
                )}
              </div>

              <div>
                <Label htmlFor="location_name" className="text-sm font-semibold">
                  Location Name (Optional)
                </Label>
                <Input
                  id="location_name"
                  value={formData.location_name}
                  onChange={(e) => setFormData({...formData, location_name: e.target.value})}
                  placeholder="e.g., Park entrance, Beach area..."
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="description" className="text-sm font-semibold">
                  Description *
                </Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  placeholder="Describe the waste (type, amount, severity)..."
                  rows={3}
                  className="mt-1"
                />
              </div>

              <div className="flex gap-2">
                <Button
                  onClick={() => {
                    setShowForm(false);
                    setFormData({ location_name: "", description: "" });
                    setSelectedFile(null);
                    setPreviewUrl(null);
                    setLocation(null);
                  }}
                  variant="outline"
                  className="flex-1"
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleSubmit}
                  disabled={isSubmitting || !selectedFile || !formData.description}
                  className="flex-1 bg-gradient-to-r from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] text-white"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Reporting...
                    </>
                  ) : (
                    "Submit Report"
                  )}
                </Button>
              </div>
            </div>
          </Card>
        )}

        {/* Hotspots List */}
        <div>
          <h2 className="text-lg font-bold text-gray-900 mb-4">Active Hotspots</h2>
          
          {hotspots.length === 0 ? (
            <Card className="p-8 text-center">
              <AlertTriangle className="w-12 h-12 text-gray-300 mx-auto mb-3" />
              <p className="text-gray-600">No active hotspots reported yet</p>
            </Card>
          ) : (
            <div className="grid gap-4">
              {hotspots.map((spot) => (
                <Card key={spot.id} className="overflow-hidden">
                  <img 
                    src={spot.photo_url} 
                    alt="Litter hotspot"
                    className="w-full h-48 object-cover"
                  />
                  <div className="p-4">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex-1">
                        <h3 className="font-bold text-gray-900">
                          {spot.location_name || "Unnamed Location"}
                        </h3>
                        <p className="text-sm text-gray-600 mt-1">
                          {spot.description}
                        </p>
                      </div>
                      <Badge className={getSeverityColor(spot.estimated_severity)}>
                        {spot.estimated_severity}
                      </Badge>
                    </div>

                    <div className="flex items-center justify-between pt-3 border-t border-gray-100">
                      <div className="flex items-center gap-2 text-sm text-gray-500">
                        <MapPin className="w-4 h-4" />
                        <span>{spot.upvotes} upvotes</span>
                      </div>
                      
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => upvoteMutation.mutate(spot.id)}
                        disabled={upvoteMutation.isPending}
                        className="text-[hsl(150,80%,40%)]"
                      >
                        <ThumbsUp className="w-4 h-4 mr-1" />
                        Upvote
                      </Button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
