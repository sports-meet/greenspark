import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Trophy, MapPin, Users, TrendingUp, Camera, Map } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

import HeroSection from "../components/home/HeroSection";
import MissionSection from "../components/home/MissionSection";
import HowItWorksSection from "../components/home/HowItWorksSection";
import ImpactStats from "../components/home/ImpactStats";
import ActivityCard from "../components/home/ActivityCard";
import LeaderboardEntry from "../components/home/LeaderboardEntry";
import PrizesSection from "../components/home/PrizesSection";
import SponsorsSection from "../components/home/SponsorsSection";
import SubmissionFlow from "../components/submission/SubmissionFlow";
import GeneralSubmissionModal from "../components/submission/GeneralSubmissionModal";

export default function Home() {
  const [user, setUser] = useState(null);
  const [selectedActivity, setSelectedActivity] = useState(null);
  const [isSubmissionOpen, setIsSubmissionOpen] = useState(false);
  const [isGeneralModalOpen, setIsGeneralModalOpen] = useState(false);

  useEffect(() => {
    checkUser();
  }, []);

  const checkUser = async () => {
    try {
      const currentUser = await base44.auth.me();
      setUser(currentUser);
    } catch (error) {
      setUser(null);
    }
  };

  const { data: activities = [] } = useQuery({
    queryKey: ['activities'],
    queryFn: () => base44.entities.Activity.filter({ active: true }),
    initialData: [],
  });

  const { data: leaderboard = [] } = useQuery({
    queryKey: ['leaderboard'],
    queryFn: async () => {
      const users = await base44.entities.User.list('-points', 10);
      return users;
    },
    initialData: []
  });

  const { data: hotspots = [] } = useQuery({
    queryKey: ['hotspots'],
    queryFn: () => base44.entities.LitterHotspot.filter({ status: 'active' }, '-upvotes', 5),
    initialData: []
  });

  const handleStartCleanup = (activity) => {
    if (!user) {
      alert("Please sign in to start cleanups");
      return;
    }
    setSelectedActivity(activity);
    setIsSubmissionOpen(true);
  };

  const maxPoints = leaderboard[0]?.points || 100;

  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <HeroSection 
        onGetStarted={() => document.getElementById('activities')?.scrollIntoView({ behavior: 'smooth' })}
        onShareAction={() => setIsGeneralModalOpen(true)}
      />

      {/* Mission & Impact Section */}
      <MissionSection />

      {/* How It Works */}
      <HowItWorksSection />

      {/* Global Impact Stats */}
      <ImpactStats />

      {/* Quick Actions */}
      <section className="py-6 px-4 bg-white">
        <div className="max-w-4xl mx-auto grid grid-cols-2 gap-3">
          <Link to={createPageUrl("SpotIt")}>
            <Button 
              variant="outline" 
              className="w-full h-20 flex-col gap-2 border-2 hover:border-[hsl(150,80%,40%)] hover:bg-[hsl(150,80%,40%)]/5"
            >
              <MapPin className="w-6 h-6 text-[hsl(150,80%,40%)]" />
              <span className="text-sm font-semibold">Spot Litter</span>
            </Button>
          </Link>
          
          <Link to={createPageUrl("HeatMap")}>
            <Button 
              variant="outline" 
              className="w-full h-20 flex-col gap-2 border-2 hover:border-[hsl(150,80%,40%)] hover:bg-[hsl(150,80%,40%)]/5"
            >
              <Map className="w-6 h-6 text-[hsl(150,80%,40%)]" />
              <span className="text-sm font-semibold">Heat Map</span>
            </Button>
          </Link>
        </div>
      </section>

      {/* Litter Hotspots */}
      {hotspots.length > 0 && (
        <section className="py-6 px-4 bg-gradient-to-b from-white to-[hsl(150,30%,98%)]">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-gray-900">üî• Active Hotspots</h2>
              <Link to={createPageUrl("SpotIt")}>
                <Button variant="ghost" size="sm" className="text-[hsl(150,80%,40%)]">
                  View All
                </Button>
              </Link>
            </div>
            
            <div className="grid gap-3">
              {hotspots.map((spot) => (
                <div key={spot.id} className="bg-white rounded-xl p-4 shadow-md flex gap-3">
                  <img 
                    src={spot.photo_url} 
                    alt="Litter spot"
                    className="w-20 h-20 rounded-lg object-cover"
                  />
                  <div className="flex-1">
                    <p className="font-semibold text-gray-900 text-sm mb-1">
                      {spot.location_name || "Unnamed Location"}
                    </p>
                    <p className="text-xs text-gray-600 line-clamp-2 mb-2">
                      {spot.description}
                    </p>
                    <div className="flex items-center gap-2 text-xs text-gray-500">
                      <MapPin className="w-3 h-3" />
                      <span>{spot.upvotes} upvotes</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Monthly Prizes */}
      <PrizesSection />

      {/* Cleanup Activities */}
      <section id="activities" className="py-8 px-4 bg-white">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              Cleanup Challenges
            </h2>
            <p className="text-sm text-gray-600">
              Complete before/after cleanups and earn rewards
            </p>
          </div>

          <div className="grid gap-4">
            {activities.map((activity) => (
              <ActivityCard
                key={activity.id}
                activity={activity}
                onSubmit={handleStartCleanup}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Leaderboard */}
      <section className="py-8 px-4 bg-gradient-to-b from-white to-[hsl(150,30%,98%)]">
        <div className="max-w-4xl mx-auto">
          <div className="mb-6 text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              Top Waste Warriors üèÜ
            </h2>
            <p className="text-sm text-gray-600">
              This month's leaders
            </p>
          </div>

          <div className="space-y-3">
            {leaderboard.map((user, index) => (
              <LeaderboardEntry
                key={user.id}
                user={user}
                rank={index + 1}
                maxPoints={maxPoints}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Sponsors */}
      <SponsorsSection />

      {/* CTA Section */}
      <section className="py-12 px-4 bg-gradient-to-br from-[hsl(150,80%,40%)] via-[hsl(170,70%,45%)] to-[hsl(190,80%,50%)]">
        <div className="max-w-4xl mx-auto text-center">
          <Camera className="w-12 h-12 text-white mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-white mb-3">
            Ready to Clean Up?
          </h2>
          <p className="text-base text-white/90 mb-6">
            Before/after photos ‚Ä¢ AI verification ‚Ä¢ Real rewards
          </p>
          <Button 
            onClick={() => document.getElementById('activities')?.scrollIntoView({ behavior: 'smooth' })}
            size="lg"
            className="bg-white text-[hsl(150,80%,40%)] hover:bg-gray-100 shadow-2xl px-8 py-6 text-base font-semibold"
          >
            Start Cleanup
          </Button>
        </div>
      </section>

      {/* Submission Modal */}
      {selectedActivity && (
        <SubmissionFlow
          activity={selectedActivity}
          isOpen={isSubmissionOpen}
          onClose={() => {
            setIsSubmissionOpen(false);
            setSelectedActivity(null);
          }}
          onSuccess={() => {
            checkUser();
            setIsSubmissionOpen(false);
            setSelectedActivity(null);
          }}
          user={user}
        />
      )}

      {/* General Submission Modal */}
      <GeneralSubmissionModal
        isOpen={isGeneralModalOpen}
        onClose={() => setIsGeneralModalOpen(false)}
        onSuccess={() => checkUser()}
      />
    </div>
  );
}
