import React, { useState, useRef } from "react";
import { base44 } from "@/api/base44Client";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { TreePine, Recycle, Waves, Sun, Droplets, PackageX, Leaf, Camera, Upload, Loader2, X, CheckCircle, Image } from "lucide-react";

const iconMap = {
  TreePine,
  Recycle,
  Waves,
  Sun,
  Droplets,
  PackageX,
  Leaf,
};

export default function ActivitySubmissionModal({ activity, isOpen, onClose, onSuccess, user }) {
  const [description, setDescription] = useState("");
  const [selectedFile, setSelectedFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef(null);
  const cameraInputRef = useRef(null);

  const IconComponent = iconMap[activity?.icon] || Leaf;

  const handleFileSelect = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (file.size > 5 * 1024 * 1024) {
      alert("File too large. Please select an image under 5MB");
      return;
    }

    if (!file.type.startsWith('image/')) {
      alert("Invalid file type. Please select an image file (JPEG, PNG, WebP)");
      return;
    }

    setSelectedFile(file);
    setPreviewUrl(URL.createObjectURL(file));
  };

  const handleSubmit = async () => {
    if (!user) {
      alert("Please sign in to submit activities");
      return;
    }

    if (!selectedFile) {
      alert("Please upload a proof photo");
      return;
    }

    setIsUploading(true);
    try {
      const { file_url } = await base44.integrations.Core.UploadFile({ file: selectedFile });

      await base44.entities.UserActivity.create({
        user_id: user.id,
        activity_id: activity.id,
        proof_image_url: file_url,
        description: description || "",
        status: "pending",
        points_awarded: 0
      });

      alert("Activity submitted! ðŸŒ± Your submission is pending review. Points will be added once approved.");

      setDescription("");
      setSelectedFile(null);
      setPreviewUrl(null);
      
      onSuccess();
      onClose();
    } catch (error) {
      alert(error.message || "Submission failed. Please try again");
    }
    setIsUploading(false);
  };

  const handleClose = () => {
    setDescription("");
    setSelectedFile(null);
    setPreviewUrl(null);
    onClose();
  };

  if (!activity) return null;

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-lg max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="p-2.5 rounded-xl bg-gradient-to-br from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] shadow-lg">
              <IconComponent className="w-5 h-5 text-white" />
            </div>
            <div>
              <DialogTitle className="text-lg font-bold">{activity.title}</DialogTitle>
              <p className="text-sm text-gray-500">Worth {activity.points} GreenPoints</p>
            </div>
          </div>
        </DialogHeader>

        <div className="space-y-4 py-2">
          <div className="bg-gray-50 rounded-lg p-3">
            <p className="text-sm text-gray-700 leading-relaxed">{activity.description}</p>
          </div>

          <div>
            <Label className="text-base font-semibold mb-2 block">Proof Photo *</Label>
            
            {previewUrl ? (
              <div className="relative rounded-xl overflow-hidden border-2 border-[hsl(150,80%,40%)]">
                <img 
                  src={previewUrl} 
                  alt="Preview" 
                  className="w-full h-56 object-cover"
                />
                <Button
                  variant="destructive"
                  size="icon"
                  className="absolute top-2 right-2 rounded-full shadow-lg"
                  onClick={() => {
                    setSelectedFile(null);
                    setPreviewUrl(null);
                  }}
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            ) : (
              <div className="grid gap-3">
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleFileSelect}
                  className="hidden"
                />
                
                <input
                  ref={cameraInputRef}
                  type="file"
                  accept="image/*"
                  capture="environment"
                  onChange={handleFileSelect}
                  className="hidden"
                />
                
                <Button
                  type="button"
                  variant="outline"
                  className="h-28 border-2 border-dashed border-gray-300 hover:border-[hsl(150,80%,40%)] hover:bg-[hsl(150,80%,40%)]/5 transition-all active:scale-95"
                  onClick={() => cameraInputRef.current?.click()}
                >
                  <div className="flex flex-col items-center gap-2">
                    <Camera className="w-8 h-8 text-[hsl(150,80%,40%)]" />
                    <span className="text-sm font-medium text-gray-700">Take Photo</span>
                  </div>
                </Button>

                <Button
                  type="button"
                  variant="outline"
                  className="h-20 border-2 hover:border-[hsl(150,80%,40%)] hover:bg-[hsl(150,80%,40%)]/5 active:scale-95 transition-all"
                  onClick={() => fileInputRef.current?.click()}
                >
                  <Image className="w-5 h-5 mr-2 text-gray-600" />
                  <span className="text-sm font-medium">Choose from Gallery</span>
                </Button>
              </div>
            )}
          </div>

          <div>
            <Label htmlFor="description" className="text-base font-semibold mb-2 block">
              Description (Optional)
            </Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Tell us about your eco-action..."
              maxLength={500}
              rows={3}
              className="resize-none text-base"
            />
            <p className="text-xs text-gray-500 mt-1">{description.length}/500</p>
          </div>
        </div>

        <DialogFooter className="gap-2">
          <Button variant="outline" onClick={handleClose} disabled={isUploading} className="flex-1">
            Cancel
          </Button>
          <Button
            onClick={handleSubmit}
            disabled={isUploading || !selectedFile}
            className="flex-1 bg-gradient-to-r from-[hsl(150,80%,40%)] to-[hsl(170,70%,45%)] text-white hover:opacity-90"
          >
            {isUploading ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Submitting...
              </>
            ) : (
              <>
                <CheckCircle className="w-4 h-4 mr-2" />
                Submit
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
